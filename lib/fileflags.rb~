require 'forwardable'
require 'date'

module FileFlags
  def self.suites
    @suites ||= []
  end

  class Suite
    HOOKS = [:startup, :shutdown]

    def initialize(directory, &block)
      @dir = File.expand_path(directory)
      @hooks = {}
      HOOKS.each{|hook| @hooks[hook] = [] }
      instance_eval(&block)
    end

    HOOKS.each do |hook|
      define_method(hook) do |&block|
        @hooks[hook] << block
      end
    end

    def file(glob, &block)
    end
  end

  class Entry
    include Comparable
    extend Forwardable

    DIARY_RE = /\A\d{4}-\d{2}-\d{2}\Z/

    def self.glob(dir)
      Dir.glob(File.join(File.expand_path(dir), "*.*")).map{|file|
        parse(file){ nil }
      }.compact
    end

    def self.parse(path)
      base = File.basename(path, '.*')
      case
      when DIARY_RE =~ base then new(path, Date.parse(base))
      when block_given?     then yield(path)
      else raise(ArgumentError, "invalid diary file name - #{path}")
      end
    end

    def initialize(path, date)
      @path = path
      @date = date
    end

    def open
      File.open(@path) do |f|
        f.flock File::LOCK_SH
        yield f
      end
    end

    def fnmatch(pattern)
      File.fnmatch(pattern, @path)
    end

    def_delegators :@date, :year, :month, :day

    def to_date
      @date
    end

    def <=>(other)
      @date <=> other.to_date
    rescue NoMethodError
      nil
    end
  end
end

def FileFlags(directory, &block)
  FileFlags.suites << FileFlags::Suite.new(directory, &block)
end



p FileFlags::Entry.glob("~/.hatena/arikui1911/diary")

__END__
# Code example:

require 'hatenadiary'


FileFlags "~/hateda" do
  startup do
    @postings = []
  end

  file "*.html" do |e|
    body = e.open{|f| f.read }
    @postings << lambda{|client|
      client.post(e.year, e.month, e.day, e.title, body)
    }
  end

  shutdown do
    HatenaDiary.login "id", "pass" do |client|
      @postings.each{|f| f.call client }
    end
  end
end


